ниже ты найдешь структуру проекта, но не просто структуру, но также содержимое всех файлов в виде кода
чтобы ты ориентировался в целом, могу сказать, что этот проект находится пока что в процессе создания,
но общий план заключается в создании инновационного маркетплэйса сначала на веб через Leptos и Tailwind
но Leptos не просто веб фреймоворк, но также используется для построения серверной архитектуры
в нашем случае на бэкенде у нас Leptos, интегрированный с Axum, а также Surrealdb в качестве базы данных
после создания веба на leptos и tailwind, а также после создания всего бэкенда, и в целом все будет - самолет,
я планирую перенести веб в десктопную версию через специальный фреймворка для реализации этой потребности
tauri

heads  C:\rust\projects\marketplace\31072024\heads\heads
  .embold
    issues.db
    vscode-logs.log
  assets
    favicon.ico
  end2end
  node_modules  library root
  src
    components
      mod.rs
      // далее идет код файла mod.rs и таким образом я сделаю с остальными значимыми для твоего первичного ознакомления с файлами
      <code mod.rs>
      use leptos::*;
      use crate::components::city_input::CityInput;

      #[component]
      pub fn Layout() -> impl IntoView {
          view! {
              <div class="flex h-screen bg-gray-100">
                  <nav class="w-1/3 bg-gradient-to-b from-green-600 to-green-800 text-white p-6 shadow-lg">
                      <ul class="space-y-6">
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"Магазин"</li>
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"Личный кабинет"</li>
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"Сообщения"</li>
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"ИИ-ассистент"</li>
                      </ul>
                  </nav>
                  <main class="w-2/3 p-8 bg-white shadow-xl">
                      <CityInput />
                  </main>
              </div>
          }
      }
      </code mod.rs>
      city_input.rs
      <code city_input.rs>
      // src/components/city_input.rs

      use leptos::*;

      #[derive(Clone, Debug, PartialEq, Eq)]
      pub struct City {
          name: String,
          has_sellers: bool,
      }

      #[component]
      pub fn CityInput() -> impl IntoView {
          let (input, set_input) = create_signal(String::new());
          let (selected_city, set_selected_city) = create_signal(None::<City>);
          let (error_message, set_error_message) = create_signal(String::new());

          let cities = vec![
              City { name: "Москва".to_string(), has_sellers: true },
              City { name: "Санкт-Петербург".to_string(), has_sellers: true },
              City { name: "Новосибирск".to_string(), has_sellers: true },
              City { name: "Екатеринбург".to_string(), has_sellers: true },
              City { name: "Казань".to_string(), has_sellers: false },
          ];

          let filtered_cities = create_memo(move |_| {
              let input = input.get().to_lowercase();
              cities
                  .iter()
                  .filter(|city| city.name.to_lowercase().starts_with(&input))
                  .cloned()
                  .collect::<Vec<_>>()
          });

          let handle_select = move |city: City| {
              set_input.set(city.name.clone());
              set_selected_city.set(Some(city));
              set_error_message.set(String::new());
          };

          let handle_submit = move |_| {
              if let Some(city) = selected_city.get() {
                  if !city.has_sellers {
                      set_error_message.set("В указанном городе нет продавцов. Возможно, вы ошиблись при вводе города? Попробуйте ввести город заново или просто укажите другой. Если вы хотите стать первым продавцом для нового города, то вы можете сделать это при добавлении нового товара через личный кабинет".to_string());
                  }
              } else {
                  set_error_message.set("Пожалуйста, выберите город из списка".to_string());
              }
          };

          view! {
              <div class="max-w-md mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg">
                  <label for="city-input" class="block text-lg font-semibold text-gray-700 mb-2">
                      "Выберите город"
                  </label>
                  <div class="relative">
                      <input
                          id="city-input"
                          type="text"
                          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition duration-300 ease-in-out"
                          placeholder="Начните вводить название города"
                          prop:value=input
                          on:input=move |ev| set_input.set(event_target_value(&ev))
                      />
                      <ul class="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-auto">
                          {move || filtered_cities.get().into_iter().map(|city| {
                              let city_clone = city.clone();
                              view! {
                                  <li
                                      class="cursor-pointer py-2 px-4 hover:bg-green-100 transition duration-200"
                                      on:click=move |_| handle_select(city_clone.clone())
                                  >
                                      <span class="font-medium">{city.name}</span>
                                      {if city.has_sellers {
                                          view! { <span class="ml-2 text-sm text-green-600">"(есть продавцы)"</span> }
                                      } else {
                                          view! { <span class="ml-2 text-sm text-gray-400">"(нет продавцов)"</span> }
                                      }}
                                  </li>
                              }
                          }).collect::<Vec<_>>()}
                      </ul>
                  </div>
                  <button
                      class="mt-4 w-full px-4 py-2 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 ease-in-out"
                      on:click=handle_submit
                  >
                      "Подтвердить город"
                  </button>
                  {move || {
                      let error = error_message.get();
                      if !error.is_empty() {
                          view! {
                              <p class="mt-2 text-sm text-red-600 bg-red-100 p-2 rounded">{error}</p>
                          }
                      } else {
                          view! { <p></p> }
                      }
                  }}
              </div>
          }
      }
      </code city_input.rs>
      layout.rs
      <code layout.rs>
      use leptos::*;
      use crate::components::city_input::CityInput;

      #[component]
      pub fn Layout() -> impl IntoView {
          view! {
              <div class="flex h-screen bg-gray-100">
                  <nav class="w-1/3 bg-gradient-to-b from-green-600 to-green-800 text-white p-6 shadow-lg">
                      <ul class="space-y-6">
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"Магазин"</li>
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"Личный кабинет"</li>
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"Сообщения"</li>
                          <li class="hover:bg-green-700 p-3 rounded-lg transition duration-300 ease-in-out cursor-pointer">"ИИ-ассистент"</li>
                      </ul>
                  </nav>
                  <main class="w-2/3 p-8 bg-white shadow-xl">
                      <CityInput />
                  </main>
              </div>
          }
      }
      </code layout.rs>
    lib.rs
    <code lib.rs>
    pub mod app;
    pub mod components;

    #[cfg(feature = "hydrate")]
    #[wasm_bindgen::prelude::wasm_bindgen]
    pub fn hydrate() {
        use app::*;
        use leptos::*;
        console_error_panic_hook::set_once();
        mount_to_body(App);
    }
    </code lib.rs>
    main.rs
    <code main.rs>
    use heads::app::App;

    #[cfg(feature = "ssr")]
    #[actix_web::main]
    async fn main() -> std::io::Result<()> {
        use actix_files::Files;
        use actix_web::*;
        use leptos::*;
        use leptos_actix::{generate_route_list, LeptosRoutes};
        use heads::app::*;

        let conf = get_configuration(None).await.unwrap();
        let addr = conf.leptos_options.site_addr;
        // Generate the list of routes in your Leptos App
        let routes = generate_route_list(App);
        println!("listening on http://{}", &addr);

        HttpServer::new(move || {
            let leptos_options = &conf.leptos_options;
            let site_root = &leptos_options.site_root;

            App::new()
                .service(Files::new("/pkg", format!("{site_root}/pkg")))
                .service(Files::new("/assets", site_root))
                .service(Files::new("/style", "style").show_files_listing())
                .service(favicon)
                .leptos_routes(leptos_options.to_owned(), routes.to_owned(), App)
                .app_data(web::Data::new(leptos_options.to_owned()))
            //.wrap(middleware::Compress::default())
        })
        .bind(&addr)?
        .run()
        .await
    }

    #[cfg(feature = "ssr")]
    #[actix_web::get("favicon.ico")]
    async fn favicon(
        leptos_options: actix_web::web::Data<leptos::LeptosOptions>,
    ) -> actix_web::Result<actix_files::NamedFile> {
        let leptos_options = leptos_options.into_inner();
        let site_root = &leptos_options.site_root;
        Ok(actix_files::NamedFile::open(format!(
            "{site_root}/favicon.ico"
        ))?)
    }

    #[cfg(not(any(feature = "ssr", feature = "csr")))]
    pub fn main() {
        // no client-side main function
        // unless we want this to work with e.g., Trunk for pure client-side testing
        // see lib.rs for hydration function instead
        // see optional feature `csr` instead
    }

    #[cfg(all(not(feature = "ssr"), feature = "csr"))]
    pub fn main() {
        // a client-side main function is required for using `trunk serve`
        // prefer using `cargo leptos serve` instead
        // to run: `trunk serve --open --features csr`
        use heads::app::*;

        console_error_panic_hook::set_once();

        leptos::mount_to_body(App);
    }
    </code main.rs>
    app.rs
    <code app.rs>
    use leptos::*;
    use leptos_meta::*;
    use crate::components::layout::Layout;

    #[component]
    pub fn App() -> impl IntoView {
        view! {
            <Stylesheet id="leptos" href="/style/output.css"/>
            <Layout />
        }
    }
    </code app.rs>
  style
    main.scss
    <code main.scss>
    body {
    	font-family: sans-serif;
    	text-align: center;
    }
    </code main.scss>
    output.css
  target
  .gitignore
  Cargo.lock
  Cargo.toml
  <code Cargo.toml>
  [package]
  name = "heads"
  version = "0.1.0"
  edition = "2021"

  [lib]
  crate-type = ["cdylib", "rlib"]

  [dependencies]
  actix-files = { version = "0.6", optional = true }
  actix-web = { version = "4", optional = true, features = ["macros"] }
  console_error_panic_hook = "0.1"
  http = { version = "1.0.0", optional = true }
  leptos = { version = "0.6" }
  leptos_meta = { version = "0.6" }
  leptos_actix = { version = "0.6", optional = true }
  leptos_router = { version = "0.6" }
  wasm-bindgen = "=0.2.92"

  [features]
  csr = ["leptos/csr", "leptos_meta/csr", "leptos_router/csr"]
  hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
  ssr = [
    "dep:actix-files",
    "dep:actix-web",
    "dep:leptos_actix",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
  ]

  # Defines a size-optimized profile for the WASM bundle in release mode
  [profile.wasm-release]
  inherits = "release"
  opt-level = 'z'
  lto = true
  codegen-units = 1
  panic = "abort"

  [package.metadata.leptos]
  # The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
  output-name = "heads"
  # The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
  site-root = "target/site"
  # The site-root relative folder where all compiled output (JS, WASM and CSS) is written
  # Defaults to pkg
  site-pkg-dir = "pkg"
  # [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
  style-file = "style/main.scss"
  # Assets source dir. All files found here will be copied and synchronized to site-root.
  # The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
  #
  # Optional. Env: LEPTOS_ASSETS_DIR.
  assets-dir = "assets"
  # The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
  site-addr = "127.0.0.1:3000"
  # The port to use for automatic reload monitoring
  reload-port = 3001
  # [Optional] Command to use when running end2end tests. It will run in the end2end dir.
  #   [Windows] for non-WSL use "npx.cmd playwright test"
  #   This binary name can be checked in Powershell with Get-Command npx
  end2end-cmd = "npx playwright test"
  end2end-dir = "end2end"
  #  The browserlist query used for optimizing the CSS.
  browserquery = "defaults"
  # The environment Leptos will run in, usually either "DEV" or "PROD"
  env = "DEV"
  # The features to use when compiling the bin target
  #
  # Optional. Can be over-ridden with the command line parameter --bin-features
  bin-features = ["ssr"]

  # If the --no-default-features flag should be used when compiling the bin target
  #
  # Optional. Defaults to false.
  bin-default-features = false

  # The features to use when compiling the lib target
  #
  # Optional. Can be over-ridden with the command line parameter --lib-features
  lib-features = ["hydrate"]

  # If the --no-default-features flag should be used when compiling the lib target
  #
  # Optional. Defaults to false.
  lib-default-features = false

  # The profile to use for the lib target when compiling for release
  #
  # Optional. Defaults to "release".
  lib-profile-release = "wasm-release"

  </code Cargo.toml>
  input.css
  <code input.css>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
  </code input.css>
  LICENSE
  package.json
  <code package.json>
  {
    "name": "heads",
    "version": "1.0.0",
    "description": "<picture>\r     <source srcset=\"https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_Solid_White.svg\" media=\"(prefers-color-scheme: dark)\">\r     <img src=\"https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg\" alt=\"Leptos Logo\">\r </picture>",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "watch:css": "tailwindcss -i input.css -o ./style/output.css --watch"
    },
    "keywords": [],
    "author": "",
    "license": "ISC",
    "devDependencies": {
      "autoprefixer": "^10.4.19",
      "postcss": "^8.4.40",
      "tailwindcss": "^3.4.7"
    }
  }
  </code package.json>
  package-lock.json
  postcss.config.js
  <code postcss.config.js>
  module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }
  </code postcss.config.js>
  README.md
  tailwind.config.js
  <code tailwind.config.js>
  module.exports = {
    content: [
      "./src/**/*.rs",
      "./index.html",
      "./src/**/*.html",
      "./src/**/*.css",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }
  </code tailwind.config.js>
External Libraries
Scratches and Consoles